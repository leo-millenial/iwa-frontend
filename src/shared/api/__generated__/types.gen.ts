// This file is auto-generated by @hey-api/openapi-ts

export type CompanyCreateDto = {
  /**
   * Название компании
   */
  name: string;
  /**
   * Город компании
   */
  city?: string;
  /**
   * Регион компании
   */
  region: string;
  /**
   * ИНН компании
   */
  inn: number;
  /**
   * Бренды компании
   */
  brands?: Array<string>;
};

export type IncomeDto = {
  /**
   * Сумма дохода
   */
  amount: number;
  /**
   * Валюта
   */
  currency: string;
};

export type FullNameDto = {
  /**
   * Имя
   */
  firstName: string;
  /**
   * Фамилия
   */
  lastName: string;
  /**
   * Отчество
   */
  middleName?: string;
};

export type JobseekerProfileDto = {
  /**
   * URL фотографии
   */
  photo?: string;
  /**
   * URL видео
   */
  video?: string;
  /**
   * Должность
   */
  position: string;
  /**
   * Желаемый доход
   */
  income: IncomeDto;
  /**
   * ФИО
   */
  fullName: FullNameDto;
  /**
   * Номер телефона
   */
  phone: string;
  /**
   * Пол
   */
  gender: "Male" | "Female";
  /**
   * Дата рождения
   */
  birthday: string;
  /**
   * Регион
   */
  region: string;
};

export type WorkExperienceDto = {
  /**
   * Название компании
   */
  company: string;
  /**
   * Должность
   */
  position: string;
  /**
   * Дата начала работы
   */
  startDate: string;
  /**
   * Дата окончания работы
   */
  endDate: string;
  /**
   * Описание обязанностей
   */
  responsibilitiesDescription: string;
  /**
   * Тип занятости
   */
  employmentType: "FullTime" | "PartTime" | "Remote" | "Office" | "Hybrid";
};

export type EducationDto = {
  /**
   * Название учебного заведения
   */
  university: string;
  /**
   * Факультет
   */
  faculty: string;
  /**
   * Степень
   */
  degree: string;
  /**
   * Дата окончания
   */
  graduationDate: string;
};

export type SkillDto = {
  /**
   * Название навыка
   */
  name: string;
  /**
   * Уровень владения
   */
  level: "Beginner" | "Intermediate" | "Advanced";
};

export type ResumeCreateDto = {
  /**
   * ID соискателя
   */
  jobseekerId: string;
  /**
   * Желаемая должность
   */
  position: string;
  /**
   * Желаемый доход
   */
  income: IncomeDto;
  /**
   * ФИО
   */
  fullName: FullNameDto;
  /**
   * Пол
   */
  gender: "Male" | "Female";
  /**
   * Дата рождения
   */
  birthday: string;
  /**
   * Email
   */
  email: string;
  /**
   * Телефон
   */
  phone: string;
  /**
   * Город
   */
  city: string;
  /**
   * Опыт работы
   */
  workExperience: Array<WorkExperienceDto>;
  /**
   * Образование
   */
  education?: Array<EducationDto>;
  /**
   * Навыки
   */
  skills?: Array<SkillDto>;
};

export type JobseekerCreateDto = {
  /**
   * Профиль соискателя
   */
  profile: JobseekerProfileDto;
  /**
   * Резюме соискателя
   */
  resumes?: Array<ResumeCreateDto>;
};

export type RegisterDto = {
  /**
   * Электронная почта
   */
  email: string;
  /**
   * Номер телефона
   */
  phone: string;
  /**
   * Пароль для авторизации
   */
  password: string;
  /**
   * Роль пользователя, должна быть ролью компании
   */
  role: "Company" | "Jobseeker" | "Admin";
  /**
   * Имя пользователя
   */
  firstName: string;
  /**
   * Фамилия пользователя
   */
  lastName: string;
  /**
   * Отображаемое имя пользователя
   */
  displayName: string;
  /**
   * Данные компании (только для роли Company)
   */
  company?: CompanyCreateDto;
  /**
   * Данные соискателя (только для роли Jobseeker)
   */
  jobseeker?: JobseekerCreateDto;
};

export type Response = {
  [key: string]: unknown;
};

export type LoginDto = {
  /**
   * Электронная почта
   */
  email: string;
  /**
   * Пароль для авторизации
   */
  password: string;
};

export type LoginByPhoneDto = {
  /**
   * Номер телефона пользователя
   */
  phone: string;
  /**
   * Пароль пользователя
   */
  password: string;
};

export type RegistrationStep1Dto = {
  email: string;
  role: "Company" | "Jobseeker" | "Admin";
  password: string;
};

export type RegistrationStartResponseDto = {
  /**
   * Идентификатор сессии регистрации
   */
  sessionId: string;
  /**
   * Текущий шаг регистрации
   */
  currentStep: number;
};

export type RegistrationStep2Dto = {
  sessionId: string;
  firstName: string;
  lastName: string;
};

export type RegistrationStep3Dto = {
  sessionId: string;
  phone: string;
};

export type RegistrationSendSmsDto = {
  sessionId: string;
};

export type RegistrationVerifySmsDto = {
  sessionId: string;
  code: string;
};

export type CompanyDto = {
  /**
   * Название компании
   */
  name: string;
  /**
   * Телефон компании
   */
  phone: string;
  /**
   * Город компании
   */
  city?: string;
  /**
   * Регион компании
   */
  region: string;
  /**
   * ИНН компании
   */
  inn: number;
  /**
   * Бренды компании
   */
  brands?: Array<string>;
};

export type JobseekerDto = {
  [key: string]: unknown;
};

export type RegistrationStep5Dto = {
  sessionId: string;
  company?: CompanyDto;
  jobseeker?: JobseekerDto;
};

export type RegistrationCompleteDto = {
  sessionId: string;
};

export type VacancyResponseDto = {
  _id: string;
  title: string;
  description: string;
  employmentType: "FullTime" | "PartTime" | "Remote" | "Office" | "Hybrid";
  experience: "Intern" | "Junior" | "Middle" | "Senior" | "Manager" | "Director";
  salary: {
    [key: string]: unknown;
  };
  companyId: string;
  brands: Array<string>;
  city: string;
  employmentTypes: "FullTime" | "PartTime" | "Remote" | "Office" | "Hybrid";
};

export type SalaryDto = {
  amount: {
    [key: string]: unknown;
  };
  /**
   * ISO 4217 (RUB or 643)
   */
  currency: string;
};

export type VacancyCreateDto = {
  title: string;
  description: string;
  salary: SalaryDto;
  city: string;
  experience: "Intern" | "Junior" | "Middle" | "Senior" | "Manager" | "Director";
  employmentTypes: Array<"FullTime" | "PartTime" | "Remote" | "Office" | "Hybrid">;
  brands: Array<Array<unknown>>;
};

export type VacancyUpdateDto = {
  title: string;
  description: string;
  salary: SalaryDto;
  city: string;
  experience: "Intern" | "Junior" | "Middle" | "Senior" | "Manager" | "Director";
  employmentTypes: Array<"FullTime" | "PartTime" | "Remote" | "Office" | "Hybrid">;
};

export type VacancyDeleteDto = {
  /**
   * ID компании, которой принадлежит вакансия
   */
  companyId: string;
};

export type UpdateCompanyDto = {
  /**
   * Название компании
   */
  name?: string;
  /**
   * Город компании
   */
  city?: string;
};

export type UpdateCompanyResponseDto = {
  /**
   * Флаг успешности операции
   */
  success: boolean;
  /**
   * Обновленные данные компании
   */
  company: UpdateCompanyDto;
};

export type UpdateIncomeDto = {
  /**
   * Сумма дохода
   */
  amount?: number;
  /**
   * Валюта
   */
  currency?: string;
};

export type UpdateFullNameDto = {
  /**
   * Имя
   */
  firstName?: string;
  /**
   * Фамилия
   */
  lastName?: string;
  /**
   * Отчество
   */
  middleName?: string;
};

export type UpdateJobseekerProfileDto = {
  /**
   * URL фотографии
   */
  photo?: string;
  /**
   * URL видео
   */
  video?: string;
  /**
   * Должность
   */
  position?: string;
  /**
   * Желаемый доход
   */
  income?: UpdateIncomeDto;
  /**
   * ФИО
   */
  fullName?: UpdateFullNameDto;
  /**
   * Номер телефона
   */
  phone?: string;
  /**
   * Пол
   */
  gender?: "Male" | "Female";
  /**
   * Дата рождения
   */
  birthday?: string;
  /**
   * Регион
   */
  region?: string;
};

export type UpdateJobseekerDto = {
  /**
   * ID пользователя
   */
  userId?: string;
  /**
   * Профиль соискателя
   */
  profile?: UpdateJobseekerProfileDto;
  /**
   * Резюме соискателя
   */
  resumes?: Array<string>;
};

export type UpdateJobseekerResponseDto = {
  /**
   * Успешность операции
   */
  success?: boolean;
  /**
   * Обновленные данные соискателя
   */
  jobseeker?: {
    [key: string]: unknown;
  };
};

export type ResumeUpdateDto = {
  /**
   * Желаемая должность
   */
  position?: string;
  /**
   * Желаемый доход
   */
  income?: IncomeDto;
  /**
   * Полное имя соискателя
   */
  fullName?: FullNameDto;
  /**
   * Пол соискателя
   */
  gender?: "Male" | "Female";
  /**
   * Дата рождения
   */
  birthday?: string;
  /**
   * Электронная почта
   */
  email?: string;
  /**
   * Номер телефона
   */
  phone?: string;
  /**
   * Город проживания
   */
  city?: string;
  /**
   * Опыт работы
   */
  workExperience?: Array<WorkExperienceDto>;
  /**
   * Образование
   */
  education?: Array<EducationDto>;
  /**
   * Навыки
   */
  skills?: Array<SkillDto>;
};

export type CreateSubscriptionRequestDto = {
  /**
   * Идентификатор компании
   */
  companyId: string;
  /**
   * Идентификатор подписки
   */
  subscriptionId: string;
};

export type CreateSubscriptionResponseDto = {
  /**
   * Ссылка на страницу оплаты
   */
  paymentUrl: string;
};

export type SubscriptionPriceDto = {
  /**
   * Месячная стоимость подписки
   */
  monthly: number;
  /**
   * Годовая стоимость подписки
   */
  annual: number;
};

export type CreateSubscriptionDto = {
  /**
   * План подписки
   */
  plan: string;
  /**
   * Длительность подписки в днях
   */
  duration: number;
  /**
   * Стоимость подписки
   */
  price: SubscriptionPriceDto;
};

export type SubscriptionResponseDto = {
  /**
   * ID подписки
   */
  _id: string;
  /**
   * План подписки
   */
  plan: string;
  /**
   * Длительность подписки в днях
   */
  duration: number;
  /**
   * Стоимость подписки
   */
  price: SubscriptionPriceDto;
  /**
   * Дата начала подписки
   */
  startDate?: string;
  /**
   * Дата окончания подписки
   */
  endDate?: string;
  /**
   * Статус подписки
   */
  status: "STARTED" | "WAITING_FOR_PAYMENT" | "ACTIVE" | "EXPIRED" | "CANCELED";
};

export type UpdateSubscriptionDto = {
  /**
   * План подписки
   */
  plan?: string;
  /**
   * Длительность подписки в днях
   */
  duration?: number;
  /**
   * Стоимость подписки
   */
  price?: SubscriptionPriceDto;
  /**
   * Дата начала подписки
   */
  startDate?: string;
  /**
   * Дата окончания подписки
   */
  endDate?: string;
  /**
   * Статус подписки
   */
  status?: "STARTED" | "WAITING_FOR_PAYMENT" | "ACTIVE" | "EXPIRED" | "CANCELED";
};

export type AuthControllerRegisterData = {
  body: RegisterDto;
  path?: never;
  query?: never;
  url: "/api/auth/register";
};

export type AuthControllerRegisterErrors = {
  /**
   * Некорректный запрос
   */
  400: unknown;
};

export type AuthControllerRegisterResponses = {
  /**
   * Пользователь успешно зарегистрирован
   */
  201: Response;
};

export type AuthControllerRegisterResponse =
  AuthControllerRegisterResponses[keyof AuthControllerRegisterResponses];

export type AuthControllerLoginData = {
  body: LoginDto;
  path?: never;
  query?: never;
  url: "/api/auth/login";
};

export type AuthControllerLoginErrors = {
  /**
   * Неверный логин или пароль
   */
  401: unknown;
};

export type AuthControllerLoginResponses = {
  /**
   * Пользователь успешно авторизован
   */
  200: Response;
};

export type AuthControllerLoginResponse =
  AuthControllerLoginResponses[keyof AuthControllerLoginResponses];

export type AuthControllerLoginByPhoneData = {
  body: LoginByPhoneDto;
  path?: never;
  query?: never;
  url: "/api/auth/login-by-phone";
};

export type AuthControllerLoginByPhoneErrors = {
  /**
   * Неверные учетные данные
   */
  401: unknown;
};

export type AuthControllerLoginByPhoneResponses = {
  /**
   * Успешный вход
   */
  200: {
    access_token?: string;
    refresh_token?: string;
  };
};

export type AuthControllerLoginByPhoneResponse =
  AuthControllerLoginByPhoneResponses[keyof AuthControllerLoginByPhoneResponses];

export type AuthControllerRefreshTokensData = {
  body?: never;
  headers: {
    /**
     * refreshToken=<your_refresh_token_here>
     */
    Cookie: string;
  };
  path?: never;
  query?: never;
  url: "/api/auth/refresh";
};

export type AuthControllerRefreshTokensErrors = {
  /**
   * токен - инвалд 🧑‍🦼
   */
  401: unknown;
};

export type AuthControllerRefreshTokensResponses = {
  /**
   * Токены успешно обновлены
   */
  200: {
    access_token?: string;
    refresh_token?: string;
  };
};

export type AuthControllerRefreshTokensResponse =
  AuthControllerRefreshTokensResponses[keyof AuthControllerRefreshTokensResponses];

export type RegistrationControllerStartRegistrationData = {
  body: RegistrationStep1Dto;
  path?: never;
  query?: never;
  url: "/api/registration/start";
};

export type RegistrationControllerStartRegistrationErrors = {
  /**
   * Некорректные данные
   */
  400: {
    statusCode?: number;
    message?: string;
    error?: string;
  };
};

export type RegistrationControllerStartRegistrationError =
  RegistrationControllerStartRegistrationErrors[keyof RegistrationControllerStartRegistrationErrors];

export type RegistrationControllerStartRegistrationResponses = {
  /**
   * Сессия регистрации создана
   */
  201: RegistrationStartResponseDto;
};

export type RegistrationControllerStartRegistrationResponse =
  RegistrationControllerStartRegistrationResponses[keyof RegistrationControllerStartRegistrationResponses];

export type RegistrationControllerProcessStep2Data = {
  body: RegistrationStep2Dto;
  path?: never;
  query?: never;
  url: "/api/registration/full-name";
};

export type RegistrationControllerProcessStep2Errors = {
  /**
   * Некорректные данные
   */
  400: unknown;
};

export type RegistrationControllerProcessStep2Responses = {
  /**
   * Шаг 2 обработан
   */
  200: unknown;
};

export type RegistrationControllerProcessStep3Data = {
  body: RegistrationStep3Dto;
  path?: never;
  query?: never;
  url: "/api/registration/phone";
};

export type RegistrationControllerProcessStep3Errors = {
  /**
   * Некорректные данные
   */
  400: unknown;
};

export type RegistrationControllerProcessStep3Responses = {
  /**
   * Шаг 3 обработан
   */
  200: unknown;
};

export type RegistrationControllerSendSmsCodeData = {
  body: RegistrationSendSmsDto;
  path?: never;
  query?: never;
  url: "/api/registration/send-sms";
};

export type RegistrationControllerSendSmsCodeErrors = {
  /**
   * Некорректные данные
   */
  400: unknown;
};

export type RegistrationControllerSendSmsCodeResponses = {
  /**
   * SMS отправлено
   */
  200: unknown;
};

export type RegistrationControllerVerifySmsCodeData = {
  body: RegistrationVerifySmsDto;
  path?: never;
  query?: never;
  url: "/api/registration/verify-sms";
};

export type RegistrationControllerVerifySmsCodeErrors = {
  /**
   * Некорректные данные
   */
  400: unknown;
};

export type RegistrationControllerVerifySmsCodeResponses = {
  /**
   * Код подтвержден
   */
  200: unknown;
};

export type RegistrationControllerProcessStep5Data = {
  body: RegistrationStep5Dto;
  path?: never;
  query?: never;
  url: "/api/registration/send-data";
};

export type RegistrationControllerProcessStep5Errors = {
  /**
   * Некорректные данные
   */
  400: unknown;
};

export type RegistrationControllerProcessStep5Responses = {
  /**
   * Шаг 5 обработан
   */
  200: unknown;
};

export type RegistrationControllerCompleteRegistrationData = {
  body: RegistrationCompleteDto;
  path?: never;
  query?: never;
  url: "/api/registration/complete";
};

export type RegistrationControllerCompleteRegistrationErrors = {
  /**
   * Некорректные данные
   */
  400: unknown;
};

export type RegistrationControllerCompleteRegistrationResponses = {
  /**
   * Регистрация завершена
   */
  200: {
    access_token?: string;
    refresh_token?: string;
  };
};

export type RegistrationControllerCompleteRegistrationResponse =
  RegistrationControllerCompleteRegistrationResponses[keyof RegistrationControllerCompleteRegistrationResponses];

export type RegistrationControllerGetRegistrationStatusData = {
  body?: never;
  path: {
    sessionId: string;
  };
  query?: never;
  url: "/api/registration/status/{sessionId}";
};

export type RegistrationControllerGetRegistrationStatusErrors = {
  /**
   * Сессия не найдена
   */
  404: unknown;
};

export type RegistrationControllerGetRegistrationStatusResponses = {
  /**
   * Информация о текущем шаге получена
   */
  200: {
    sessionId?: string;
    currentStep?: number;
  };
};

export type RegistrationControllerGetRegistrationStatusResponse =
  RegistrationControllerGetRegistrationStatusResponses[keyof RegistrationControllerGetRegistrationStatusResponses];

export type UserControllerMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/user/me";
};

export type UserControllerMeErrors = {
  /**
   * Неавторизованный доступ - неверный или отсутствующий токен
   */
  401: unknown;
};

export type UserControllerMeResponses = {
  /**
   * Информация о пользователе успешно получена
   */
  200: {
    user?: unknown;
    company?: unknown;
    jobseeker?: unknown;
  };
};

export type UserControllerMeResponse = UserControllerMeResponses[keyof UserControllerMeResponses];

export type UserControllerListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/user/list";
};

export type UserControllerListResponses = {
  /**
   * Список вакансий и компаний успешно получен
   */
  200: {
    /**
     * Массив объектов пользователей
     */
    users?: Array<RegisterDto>;
  };
};

export type UserControllerListResponse =
  UserControllerListResponses[keyof UserControllerListResponses];

export type VacancyControllerListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/vacancy/list";
};

export type VacancyControllerListErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type VacancyControllerListResponses = {
  200: Array<VacancyResponseDto>;
};

export type VacancyControllerListResponse =
  VacancyControllerListResponses[keyof VacancyControllerListResponses];

export type VacancyControllerGetByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/vacancy/{id}";
};

export type VacancyControllerGetByIdErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Вакансия не найдена
   */
  404: unknown;
};

export type VacancyControllerGetByIdResponses = {
  /**
   * Вакансия успешно получена
   */
  200: VacancyResponseDto;
};

export type VacancyControllerGetByIdResponse =
  VacancyControllerGetByIdResponses[keyof VacancyControllerGetByIdResponses];

export type VacancyControllerCreateData = {
  body: VacancyCreateDto;
  path?: never;
  query?: never;
  url: "/api/vacancy/create";
};

export type VacancyControllerCreateErrors = {
  /**
   * Bad Request
   */
  400: unknown;
  /**
   * Unauthorized
   */
  401: unknown;
};

export type VacancyControllerCreateResponses = {
  /**
   * Вакансия успешно создана
   */
  201: VacancyResponseDto;
};

export type VacancyControllerCreateResponse =
  VacancyControllerCreateResponses[keyof VacancyControllerCreateResponses];

export type VacancyControllerUpdateData = {
  body: VacancyUpdateDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/vacancy/update/{id}";
};

export type VacancyControllerUpdateErrors = {
  /**
   * Bad Request
   */
  400: unknown;
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Вакансия не найдена
   */
  404: unknown;
};

export type VacancyControllerUpdateResponses = {
  /**
   * Вакансия успешно обновлена
   */
  200: VacancyResponseDto;
};

export type VacancyControllerUpdateResponse =
  VacancyControllerUpdateResponses[keyof VacancyControllerUpdateResponses];

export type VacancyControllerDeleteData = {
  body: VacancyDeleteDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/vacancy/delete/{id}";
};

export type VacancyControllerDeleteResponses = {
  200: unknown;
};

export type VacancyControllerDeleteMultipleData = {
  body: {
    /**
     * Массив ID вакансий для удаления
     */
    vacancyIds?: Array<string>;
  };
  path: {
    companyId: string;
  };
  query?: never;
  url: "/api/vacancy/by-company/{companyId}";
};

export type VacancyControllerDeleteMultipleErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type VacancyControllerDeleteMultipleResponses = {
  /**
   * Вакансии успешно удалены
   */
  200: {
    message?: string;
    deletedCount?: number;
  };
};

export type VacancyControllerDeleteMultipleResponse =
  VacancyControllerDeleteMultipleResponses[keyof VacancyControllerDeleteMultipleResponses];

export type VacancyControllerGetByCompanyIdData = {
  body?: never;
  path: {
    companyId: string;
  };
  query?: never;
  url: "/api/vacancy/by-company/{companyId}";
};

export type VacancyControllerGetByCompanyIdErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type VacancyControllerGetByCompanyIdResponses = {
  /**
   * Список вакансий компании
   */
  200: Array<VacancyResponseDto>;
};

export type VacancyControllerGetByCompanyIdResponse =
  VacancyControllerGetByCompanyIdResponses[keyof VacancyControllerGetByCompanyIdResponses];

export type VacancyControllerCreateByCompanyIdData = {
  body: VacancyCreateDto;
  path: {
    companyId: string;
  };
  query?: never;
  url: "/api/vacancy/by-company/{companyId}";
};

export type VacancyControllerCreateByCompanyIdErrors = {
  /**
   * Bad Request
   */
  400: unknown;
  /**
   * Unauthorized
   */
  401: unknown;
};

export type VacancyControllerCreateByCompanyIdResponses = {
  /**
   * Вакансия успешно создана
   */
  201: VacancyResponseDto;
};

export type VacancyControllerCreateByCompanyIdResponse =
  VacancyControllerCreateByCompanyIdResponses[keyof VacancyControllerCreateByCompanyIdResponses];

export type VacancyControllerUpdateByCompanyIdData = {
  body: VacancyUpdateDto;
  path: {
    companyId: string;
    id: string;
  };
  query?: never;
  url: "/api/vacancy/by-company/{companyId}/vacancy/{id}";
};

export type VacancyControllerUpdateByCompanyIdErrors = {
  /**
   * Bad Request
   */
  400: unknown;
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Вакансия не найдена
   */
  404: unknown;
};

export type VacancyControllerUpdateByCompanyIdResponses = {
  /**
   * Вакансия успешно обновлена
   */
  200: VacancyResponseDto;
};

export type VacancyControllerUpdateByCompanyIdResponse =
  VacancyControllerUpdateByCompanyIdResponses[keyof VacancyControllerUpdateByCompanyIdResponses];

export type CompanyControllerListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/companies/list";
};

export type CompanyControllerListErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type CompanyControllerListResponses = {
  /**
   * Список компаний успешно получен
   */
  200: {
    /**
     * ID компании
     */
    _id?: string;
    /**
     * Название компании
     */
    name?: string;
    /**
     * Местонахождение компании
     */
    city?: string;
    /**
     * ID пользователя, связанного с компанией
     */
    userId?: string;
    /**
     * Список вакансий компании
     */
    vacancies?: Array<VacancyCreateDto>;
  };
};

export type CompanyControllerListResponse =
  CompanyControllerListResponses[keyof CompanyControllerListResponses];

export type CompanyControllerGetByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/companies/{id}";
};

export type CompanyControllerGetByIdErrors = {
  /**
   * Неавторизованный доступ
   */
  401: unknown;
  /**
   * Компания не найдена
   */
  404: unknown;
};

export type CompanyControllerGetByIdResponses = {
  /**
   * Компания успешно найдена
   */
  200: {
    /**
     * ID компании
     */
    _id?: string;
    /**
     * Название компании
     */
    name?: string;
    /**
     * Регион компании
     */
    region?: string;
    /**
     * Город компании
     */
    city?: string;
    /**
     * Телефон компании
     */
    phone?: string;
    /**
     * ИНН компании
     */
    inn?: number;
    /**
     * ID пользователя
     */
    userId?: string;
    /**
     * Бренды компании
     */
    brands?: Array<string>;
    /**
     * URL логотипа компании
     */
    logoUrl?: string;
    /**
     * URLs сертификатов компании
     */
    certificateUrls?: Array<string>;
    /**
     * URLs документов компании
     */
    documentUrls?: Array<string>;
    /**
     * Список вакансий компании
     */
    vacancies?: Array<VacancyCreateDto>;
  };
};

export type CompanyControllerGetByIdResponse =
  CompanyControllerGetByIdResponses[keyof CompanyControllerGetByIdResponses];

export type CompanyControllerUpdateData = {
  body: UpdateCompanyDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/companies/update/{id}";
};

export type CompanyControllerUpdateErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
  /**
   * Компания не найдена
   */
  404: unknown;
};

export type CompanyControllerUpdateResponses = {
  /**
   * Компания успешно обновлена
   */
  200: UpdateCompanyResponseDto;
};

export type CompanyControllerUpdateResponse =
  CompanyControllerUpdateResponses[keyof CompanyControllerUpdateResponses];

export type CompanyControllerDeleteData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/companies/delete/{id}";
};

export type CompanyControllerDeleteErrors = {
  /**
   * Неавторизованный доступ
   */
  401: unknown;
  /**
   * Компания не найдена
   */
  404: unknown;
};

export type CompanyControllerDeleteResponses = {
  /**
   * Компания успешно удалена
   */
  200: {
    message?: string;
  };
};

export type CompanyControllerDeleteResponse =
  CompanyControllerDeleteResponses[keyof CompanyControllerDeleteResponses];

export type JobseekerControllerGetByIdData = {
  body?: never;
  path: {
    /**
     * ID соискателя
     */
    id: string;
  };
  query?: never;
  url: "/api/jobseeker/{id}";
};

export type JobseekerControllerGetByIdErrors = {
  /**
   * Неавторизованный доступ
   */
  401: unknown;
  /**
   * Соискатель не найден
   */
  404: unknown;
};

export type JobseekerControllerGetByIdResponses = {
  /**
   * Информация о соискателе успешно получена
   */
  200: {
    _id?: string;
    profile?: {
      photo?: string;
      video?: string;
      position?: string;
      income?: {
        amount?: number;
        currency?: string;
      };
      fullName?: {
        firstName?: string;
        lastName?: string;
        middleName?: string;
      };
      phone?: string;
      gender?: string;
      birthday?: string;
      region?: string;
    };
    userId?: string;
    resumes?: Array<{
      _id?: string;
      position?: string;
    }>;
    documentFileIds?: Array<string>;
    certificateFileIds?: Array<string>;
  };
};

export type JobseekerControllerGetByIdResponse =
  JobseekerControllerGetByIdResponses[keyof JobseekerControllerGetByIdResponses];

export type JobseekerControllerListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/jobseeker/list";
};

export type JobseekerControllerListErrors = {
  /**
   * Unauthorized
   */
  401: unknown;
};

export type JobseekerControllerListResponses = {
  /**
   * Список соискателей успешно получен
   */
  200: {
    jobseekers?: Array<{
      /**
       * ID соискателя
       */
      _id?: string;
      /**
       * Имя соискателя
       */
      firstName?: string;
      /**
       * Фамилия соискателя
       */
      lastName?: string;
      /**
       * Email соискателя
       */
      email?: string;
      /**
       * ID пользователя, связанного с соискателем
       */
      userId?: string;
      /**
       * Список резюме соискателя
       */
      resumes?: Array<ResumeCreateDto>;
    }>;
  };
};

export type JobseekerControllerListResponse =
  JobseekerControllerListResponses[keyof JobseekerControllerListResponses];

export type JobseekerControllerUpdateData = {
  body: UpdateJobseekerDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/jobseeker/update/{id}";
};

export type JobseekerControllerUpdateErrors = {
  /**
   * Неавторизованный доступ
   */
  401: unknown;
  /**
   * Соискатель не найден
   */
  404: unknown;
};

export type JobseekerControllerUpdateResponses = {
  /**
   * Информация о соискателе успешно обновлена
   */
  200: UpdateJobseekerResponseDto;
};

export type JobseekerControllerUpdateResponse =
  JobseekerControllerUpdateResponses[keyof JobseekerControllerUpdateResponses];

export type JobseekerControllerDeleteData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/jobseeker/delete/{id}";
};

export type JobseekerControllerDeleteErrors = {
  /**
   * Неавторизованный доступ
   */
  401: unknown;
  /**
   * Соискатель не найден
   */
  404: unknown;
};

export type JobseekerControllerDeleteResponses = {
  /**
   * Соискатель успешно удален
   */
  200: {
    message?: string;
  };
};

export type JobseekerControllerDeleteResponse =
  JobseekerControllerDeleteResponses[keyof JobseekerControllerDeleteResponses];

export type JobseekerControllerUploadPhotoData = {
  body: {
    /**
     * Фотография соискателя
     */
    file?: Blob | File;
  };
  path: {
    /**
     * ID соискателя
     */
    id: string;
  };
  query?: never;
  url: "/api/jobseeker/{id}/upload-photo";
};

export type JobseekerControllerUploadPhotoErrors = {
  /**
   * Неавторизованный доступ
   */
  401: unknown;
  /**
   * Доступ запрещен
   */
  403: unknown;
};

export type JobseekerControllerUploadPhotoResponses = {
  /**
   * Фотография успешно загружена
   */
  200: {
    success?: boolean;
    fileId?: string;
    message?: string;
  };
};

export type JobseekerControllerUploadPhotoResponse =
  JobseekerControllerUploadPhotoResponses[keyof JobseekerControllerUploadPhotoResponses];

export type JobseekerControllerUploadVideoData = {
  body: {
    /**
     * Видео соискателя
     */
    file?: Blob | File;
  };
  path: {
    /**
     * ID соискателя
     */
    id: string;
  };
  query?: never;
  url: "/api/jobseeker/{id}/upload-video";
};

export type JobseekerControllerUploadVideoErrors = {
  /**
   * Неавторизованный доступ
   */
  401: unknown;
  /**
   * Доступ запрещен
   */
  403: unknown;
};

export type JobseekerControllerUploadVideoResponses = {
  /**
   * Видео успешно загружено
   */
  200: {
    success?: boolean;
    fileId?: string;
    message?: string;
  };
};

export type JobseekerControllerUploadVideoResponse =
  JobseekerControllerUploadVideoResponses[keyof JobseekerControllerUploadVideoResponses];

export type ResumeControllerListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Поиск по ключевым словам в названии или описании
     */
    query?: string;
    /**
     * Фильтр по городу
     */
    city?: string;
    /**
     * Фильтр по опыту работы
     */
    experience?: "Intern" | "Junior" | "Middle" | "Senior" | "Manager" | "Director";
    /**
     * Фильтр по типу занятости
     */
    employmentTypes?: Array<"FullTime" | "PartTime" | "Remote" | "Office" | "Hybrid">;
    /**
     * Минимальная ожидаемая зарплата
     */
    salaryMin?: number;
    /**
     * Максимальная ожидаемая зарплата
     */
    salaryMax?: number;
    /**
     * Фильтр по навыкам (через запятую)
     */
    skills?: string;
  };
  url: "/api/resume/list";
};

export type ResumeControllerListErrors = {
  /**
   * Неавторизованный доступ
   */
  401: unknown;
};

export type ResumeControllerListResponses = {
  /**
   * Возвращает массив резюме
   */
  200: Array<ResumeCreateDto>;
};

export type ResumeControllerListResponse =
  ResumeControllerListResponses[keyof ResumeControllerListResponses];

export type ResumeControllerCreateData = {
  body: ResumeCreateDto;
  path?: never;
  query?: never;
  url: "/api/resume/create";
};

export type ResumeControllerCreateErrors = {
  /**
   * Некорректные данные
   */
  400: unknown;
  /**
   * Неавторизованный доступ
   */
  401: unknown;
};

export type ResumeControllerCreateResponses = {
  /**
   * Резюме успешно создано
   */
  201: ResumeCreateDto;
};

export type ResumeControllerCreateResponse =
  ResumeControllerCreateResponses[keyof ResumeControllerCreateResponses];

export type ResumeControllerUpdateData = {
  body: ResumeUpdateDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/resume/update/{id}";
};

export type ResumeControllerUpdateErrors = {
  /**
   * Некорректные данные
   */
  400: unknown;
  /**
   * Неавторизованный доступ
   */
  401: unknown;
  /**
   * Резюме не найдено
   */
  404: unknown;
};

export type ResumeControllerUpdateResponses = {
  /**
   * Резюме успешно обновлено
   */
  200: ResumeUpdateDto;
};

export type ResumeControllerUpdateResponse =
  ResumeControllerUpdateResponses[keyof ResumeControllerUpdateResponses];

export type ResumeControllerDeleteData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/resume/delete/{id}";
};

export type ResumeControllerDeleteErrors = {
  /**
   * Неавторизованный доступ
   */
  401: unknown;
  /**
   * Резюме не найдено
   */
  404: unknown;
};

export type ResumeControllerDeleteResponses = {
  /**
   * Резюме успешно удалено
   */
  200: {
    message?: string;
  };
};

export type ResumeControllerDeleteResponse =
  ResumeControllerDeleteResponses[keyof ResumeControllerDeleteResponses];

export type SubscriptionControllerCreateData = {
  body: CreateSubscriptionRequestDto;
  path?: never;
  query?: never;
  url: "/api/subscriptions/create";
};

export type SubscriptionControllerCreateResponses = {
  /**
   * Возвращает ссылку на оплату
   */
  201: CreateSubscriptionResponseDto;
};

export type SubscriptionControllerCreateResponse =
  SubscriptionControllerCreateResponses[keyof SubscriptionControllerCreateResponses];

export type SubscriptionControllerGetCurrentData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/subscriptions/current";
};

export type SubscriptionControllerGetCurrentResponses = {
  /**
   * Статус и информация текущей подписки
   */
  200: unknown;
};

export type SubscriptionAdminControllerCreateCompanySubscriptionData = {
  body: CreateSubscriptionDto;
  path?: never;
  query?: never;
  url: "/api/adm/subscriptions/company";
};

export type SubscriptionAdminControllerCreateCompanySubscriptionResponses = {
  /**
   * Подписка успешно создана
   */
  201: SubscriptionResponseDto;
};

export type SubscriptionAdminControllerCreateCompanySubscriptionResponse =
  SubscriptionAdminControllerCreateCompanySubscriptionResponses[keyof SubscriptionAdminControllerCreateCompanySubscriptionResponses];

export type SubscriptionAdminControllerGetAllSubscriptionsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/adm/subscriptions/company/all";
};

export type SubscriptionAdminControllerGetAllSubscriptionsResponses = {
  /**
   * Список подписок успешно получен
   */
  200: Array<SubscriptionResponseDto>;
};

export type SubscriptionAdminControllerGetAllSubscriptionsResponse =
  SubscriptionAdminControllerGetAllSubscriptionsResponses[keyof SubscriptionAdminControllerGetAllSubscriptionsResponses];

export type SubscriptionAdminControllerDeleteSubscriptionData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/adm/subscriptions/company/{id}";
};

export type SubscriptionAdminControllerDeleteSubscriptionErrors = {
  /**
   * Подписка не найдена
   */
  404: unknown;
};

export type SubscriptionAdminControllerDeleteSubscriptionResponses = {
  /**
   * Подписка успешно удалена
   */
  200: {
    success?: boolean;
    message?: string;
  };
};

export type SubscriptionAdminControllerDeleteSubscriptionResponse =
  SubscriptionAdminControllerDeleteSubscriptionResponses[keyof SubscriptionAdminControllerDeleteSubscriptionResponses];

export type SubscriptionAdminControllerGetSubscriptionByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/adm/subscriptions/company/{id}";
};

export type SubscriptionAdminControllerGetSubscriptionByIdErrors = {
  /**
   * Подписка не найдена
   */
  404: unknown;
};

export type SubscriptionAdminControllerGetSubscriptionByIdResponses = {
  /**
   * Подписка успешно получена
   */
  200: SubscriptionResponseDto;
};

export type SubscriptionAdminControllerGetSubscriptionByIdResponse =
  SubscriptionAdminControllerGetSubscriptionByIdResponses[keyof SubscriptionAdminControllerGetSubscriptionByIdResponses];

export type SubscriptionAdminControllerUpdateSubscriptionData = {
  body: UpdateSubscriptionDto;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/adm/subscriptions/company/{id}";
};

export type SubscriptionAdminControllerUpdateSubscriptionErrors = {
  /**
   * Подписка не найдена
   */
  404: unknown;
};

export type SubscriptionAdminControllerUpdateSubscriptionResponses = {
  /**
   * Подписка успешно обновлена
   */
  200: SubscriptionResponseDto;
};

export type SubscriptionAdminControllerUpdateSubscriptionResponse =
  SubscriptionAdminControllerUpdateSubscriptionResponses[keyof SubscriptionAdminControllerUpdateSubscriptionResponses];

export type FilesControllerUploadFileData = {
  body: {
    /**
     * Файл для загрузки
     */
    file: Blob | File;
    /**
     * ID сущности (компании или соискателя)
     */
    entityId: string;
    /**
     * Тип файла (аватар, сертификат, документ и т.д.)
     */
    fileType: "logo" | "photo" | "video" | "resume" | "certificate" | "document";
    /**
     * Тип сущности (компания или соискатель)
     */
    entityType: "Company" | "Jobseeker";
  };
  path?: never;
  query?: never;
  url: "/api/files/upload";
};

export type FilesControllerUploadFileResponses = {
  201: unknown;
};

export type FilesControllerGetFileData = {
  body?: never;
  path: {
    /**
     * ID файла
     */
    fileId: string;
  };
  query?: never;
  url: "/api/files/{fileId}";
};

export type FilesControllerGetFileResponses = {
  200: unknown;
};

export type ClientOptions = {
  baseUrl: string;
};
